 ***********************************
 SINGLY LINKED LIST
 ***********************************

 Complexity of counting the size of the list would be: Î¸(n) aka Theta of n because we have to count exactly n elements.
   So we get to know the currentSize. But if we keep track of the currentSize,
   then the complexity to know the size get reduced to O(1) aka constant time,
   because we just need to add or subtract from the currentSize when we add or remove a node.

   BOUNDARY CONDITIONS:

   Empty data structure -> worries : adding last(nullPExc), removeFirst(nullPExc)
   Single element in the data structure
   Adding or removing from the beginning of the data structure
   Adding or removing from the ending of the data structure
   Working in the middle

   SUPER IMPORTANT::: while(tmp.next != null) -> stop at last node (peek Last)
                      while(tmp != null) -> stop after the last node  (contains, find and remove)
                      tail is required for having O(1) for adding and removing

   ADDING FIRST
   head is null when the linked list is empty. In order to add a node, we have to assign the memory address
   of the A node to the head, meaning that the head variable will be a pointer to A node.
   If we want to add a new node B AS THE FIRST NODE, so before A, we will do the same process. The head variable will
   point to B node and now, nothing will point to A node anymore, so it will be a candidate for garbage collection.
   BUT WAIT!! We don't want A to be garbage collected. So what we do instead is we let the variable head point to A
   and make the variable next of node B point to A, before anything else, so we don't lose the reference to A.
   Now we can finally assign to head the reference to B.

   The complexity of adding first to a linked list, so, is just 1 because i don't need to traverse the list.
   When adding first we don't need to worry of null pointer exception because we are just assigning null to the
   A node next, which ofc doesn't cause any trouble.

   ADDING LAST
   Since we have assigned node to head, if we have a linked list of 3 nodes, we could write
   head.next.next.next = node;
   where node is the node we adding at the end of the list. But this isn't feasible if the list will contain a lots of nodes.

   So instead we add a temporary pointer called tmp which will point to the head (node A for example).
   Now we check if(tmp.next != null) then we will have tmp = tmp.next; tmp will point to node B.
   We check again then we will make tmp point to node C. We check again and now tmp.next is indeed null.
   So we can add a new node called D and we make tmp.next point to it and ALSO the C node.next will point to D.
   Finally we increase the currentSize;
   We do this in a while loop.

   We have to worry when we have an empty list about the null pointer exception because we have temp.next which is null.
   So we check if head == null right after creating the new node, we assign node to head, we increment the currentSize and
   finally we return; out of the addLast method.
   The complexity of adding last is O(n) because of the while loop, we are traversing the whole list.

   To reduce this, we can use another pointer called tail that points to the last node of the list,
   so the complexity becomes O(1). We add a global variable called tail that at first is null.
   When we add a last node with this faster method, we have to make tail equal to the node if the head is equal to null.
   If not then we make tail.next = node, tail = node and increment size.
   We also needs to modify the addFirst method in order for the tail to point to the added node aswell as the head if the list is empty.

   REMOVE FIRST
   We have to make head pointing to B so the reference to A gets lost and therefor A gets garbage collected
   So we do head = head.next because head.next points to B.
   If we have an empty list, head points to null, therefor head.next will throw a null pointer exception. We also have nothing to return.
   If there is a single element, both head and tail point to the same element, so if we set head = head.next we have to also set tail = head.next;
   To check if we have a single node list, we compare if(head == tail) and then we update both of them if true, head = tail = null;

   REMOVE LAST
   There is no mechanism to go from C to B in a singly linked list. So we have to go from the start.
   We need to create two temporal pointers, the first is current and point to head, the second is called previous and it's going to point to null at start.
   Then we want to set previous to current and current to current.next as many times as the nodes in the list.

   If we have an empty list, we return null;
   If we have one node in the list, we can just call removeFirst();
   To tell if we are at the end of the list we while current != tail or current.next == null. At the end of the list current == tail and current.next == tail
   So we set previous = current and current = current.next;
   Then we point previous.next = null; because is the new tail, tail = previous, we decrease current size and we return current.data;
   Always 0(n) even with the tail because we have no way to go to the node before the last.

   FIND AND REMOVE

   In order to find a specific node we use the comparable interface if(((Comparable<E>)current.data).compareTo(obj) == 0). When we find the node to remove, we
   take the node before .next for example previous.next and we point it to the node after the one to delete. So basically previous.next = current.next; because ofc current.next
   points to the next node. So we have these 2 pointers. We traverse the list with them comparing the nodes with our one to find and delete.
   For the 5 conditions: if we have an empty list we wont find the node ofc, so we just return null. To see if the list is empty we can check if the currentSize is 0, or if head/tail
   are equals to null.
   If we have a single element list so when head and tail are equal, if the only one node is the one to remove we use the removeFirst(); method because it just works we already test it.
   If we work at the beginning of the list we use again removeFirst(); if the first node is the one to remove, this case Current points to head and previous is null.
   If we work at the ending of the list so current points to tail, we just use removeLast(); if the node to remove is the last node.
   If we work in the middle somewhere of the list, we have the two pointers, current = head, previous = null at first. To traverse the list we set previous = current and current = current.next.
   as many times till we find the node we want to remove. To check the last element we have to continue till current = null otherwise we will stop just before the last element.
   Pay attention that remove first and remove last has the same return data type of the whole find and remove method.
   Also remember here we check in the while until current != null in the removeLast we check until current.next!= null. In this case we dont skip to check the last node.
   Be careful to return current.data not the E obj passed as parameter because the first may contain more information than the E obj.

   CONTAINS

   We just need to use the compareTo method.

   PEEK FIRST

   Complexity 0(n)

   PEEK LAST

   Complexity O(1)


   TESTING THE LINKED LIST

   Separated class as tester with a main method

   ITERATOR & ITERABLE

   In java 1,8 interfaces can provide default implementations of the methods except hashcode equals and toString because they are in Object


 ***********************************
 DOUBLY LINKED LIST
 ***********************************

 We have head which points to the first node A. A has next, previous and data. A.next points to B, A.previous is null because A is the first element.
 B.next points to C and B.previous points to A node
 Tail is the last node C and it is required for having constant time adding and remove.
 E tmp = tail.data stores the data in the last node.
 Traversing the doubly linked list is not O(n) like the singly list, because Node<E> beforeLast = tail.previous; (beforeLast is the node before the last one)
 tail.previous.next = null will delete the last not, it basically points at it self. If C is the tail, tail is the tail, tail.previous is the node B, tail.previous.next is C or the tail again.
 When i say a variable is the node in reality is just a pointer to that node it contains the memory address but it can help to think about it as the node itself.
 tail = tail.previous will make tail pointing or be the B node, so B is the new tail.
 We return tmp which contains the removed node data. Even if the removed node gets garbage collected we still have save his data and we can return it.
 This is a constant time O(1) removeLast.

 The addFirst in this tipe of list has the disadvantage to require an extra step to add a new node at the beginning.
 create the new node
 set new node.next = head
 set head.previous = new node (this is the extra step)
 set head = new node

 To add something in the middle for example between A and B (current is B, previous is A):
 new node
 new node.previous = current.previous (current.previous = A)
 current.previous.next = new node  (A.next = new node)
 current.previous = new node (A = current.previous = new node)
 new node.next = current (new node.next = B)

 ***********************************
 CIRCULAR LINKED LIST
 ***********************************

 Possible solutions to see if the list is circular we could:

 record a data item and see if we find it again. But if we allow multiple same value items this isnt feasible
 Start at the had, iterate until you find head again.
 Compare memory addresses

 The right way to do it is the second method. You have to create a temporary pointer tmp and iterate trough the list.
 You iterate until tmp == null, tmp == head  or tmp.next = head
 This is O(n)
 If we have a tail pointer we could check if tail.next == head and this is O(1)

 To check if the list isnt properly circular:

 Now let's say that the last element doesnt point to the first one but some other node in the middle of the list.
 We could see that by seeing that tail.next is not null and it doesnt point to head.
 Without tail we need 2 temporary pointers, using one to iterate the list and then moving the other to reiterate with the first pointer again,
 so a loop nested in a loop so this would be O(n^2). Kinda bad, use the tail.


















